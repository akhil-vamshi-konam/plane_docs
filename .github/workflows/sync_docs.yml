name: Sync Documentation to Search Index

on:
  push:
    branches:
      - main
    paths:
      - '**.mdx'
      - '**.txt'

jobs:
  sync-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: |
            **/*.mdx
            **/*.txt
          json: true

      - name: Display changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Modified files:"
          echo '${{ steps.changed-files.outputs.modified_files }}' | jq '.'
          echo "Added files:"
          echo '${{ steps.changed-files.outputs.added_files }}' | jq '.'
          echo "Deleted files:"
          echo '${{ steps.changed-files.outputs.deleted_files }}' | jq '.'

      - name: Send webhook
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        run: |
          # Build payload with single commit containing net changes
          payload=$(jq -n \
            --argjson added '${{ steps.changed-files.outputs.added_files }}' \
            --argjson modified '${{ steps.changed-files.outputs.modified_files }}' \
            --argjson removed '${{ steps.changed-files.outputs.deleted_files }}' \
            '{
              commits: [{
                added: $added,
                removed: $removed,
                modified: $modified
              }],
              repository: {
                name: "${{ github.event.repository.name }}",
                full_name: "${{ github.repository }}",
                owner: {
                  name: "${{ github.repository_owner }}"
                }
              }
            }')
          
          # Generate signature (same as your current method)
          signature=$(echo -n "$payload" | openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" -binary | xxd -p -c 256)
          
          # Send webhook with retries
          for attempt in 1 2 3; do
            echo "Attempt $attempt..."
            
            response=$(curl -X POST "$WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -H "X-Hub-Signature-256: sha256=$signature" \
              -H "X-GitHub-Event: push" \
              -d "$payload" \
              -w "\n%{http_code}" \
              -s \
              --connect-timeout 30 \
              --max-time 60)
            
            http_status=$(echo "$response" | tail -n1)
            response_body=$(echo "$response" | sed '$d')
            
            echo "HTTP Status: $http_status"
            echo "Response body: $response_body"
            
            if [ "$http_status" -eq 200 ] || [ "$http_status" -eq 201 ] || [ "$http_status" -eq 202 ]; then
              echo "✅ Webhook sent successfully"
              exit 0
            elif [ "$attempt" -lt 3 ]; then
              echo "Retrying in 5 seconds..."
              sleep 5
            fi
          done
          
          echo "❌ Failed to send webhook after 3 attempts"
          exit 1