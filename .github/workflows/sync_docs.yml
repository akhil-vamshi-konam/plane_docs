name: Sync Documentation to Search Index

on:
  push:
    branches: [main]
    paths:
      - '**/*.mdx'
      - '**/*.txt'

jobs:
  sync-docs:
    runs-on: ubuntu-latest

    steps:
      # 1 – Check out the code
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # full history → better diff detection

      # 2 – Work out exactly which docs changed
      - name: Get changed files
        id: changed
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: |
            **/*.mdx
            **/*.txt
          json: true       # gives us *_files_json outputs

      # 3 – (Optional) Print the diff for troubleshooting
      - name: Show diff
        if: steps.changed.outputs.any_changed == 'true'
        run: |
          echo "Modified files:" ; echo '${{ steps.changed.outputs.modified_files_json }}' | jq .
          echo "Added files:"    ; echo '${{ steps.changed.outputs.added_files_json }}'    | jq .
          echo "Deleted files:"  ; echo '${{ steps.changed.outputs.deleted_files_json }}'  | jq .

      # 4 – Send a signed webhook with a single “diff” commit
      - name: Push diff to search index
        if: steps.changed.outputs.any_changed == 'true'
        env:
          WEBHOOK_URL:    ${{ secrets.WEBHOOK_URL }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        run: |
          # Build JSON payload
          payload=$(jq -n \
            --argjson added    '${{ steps.changed.outputs.added_files_json }}' \
            --argjson modified '${{ steps.changed.outputs.modified_files_json }}' \
            --argjson removed  '${{ steps.changed.outputs.deleted_files_json }}' \
            --arg repo_name    "${{ github.event.repository.name }}" \
            --arg repo_full    "${{ github.repository }}" \
            --arg owner        "${{ github.repository_owner }}" \
            '{
              commits: [{
                added:    $added,
                removed:  $removed,
                modified: $modified
              }],
              repository: {
                name:      $repo_name,
                full_name: $repo_full,
                owner: { name: $owner }
              }
            }')

          # Sign with HMAC-SHA256
          sig=$(printf '%s' "$payload" | \
                openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" -binary | xxd -p -c 256)

          # POST (retry 3× for resilience)
          for attempt in 1 2 3 ; do
            echo "Attempt $attempt"
            resp=$(curl -sS -X POST "$WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -H "X-Hub-Signature-256: sha256=$sig" \
              -H "X-GitHub-Event: push" \
              --data "$payload" \
              -w '\n%{http_code}')

            code=$(echo "$resp" | tail -n1)
            body=$(echo "$resp" | sed '$d')
            echo "HTTP $code" ; echo "$body"

            if [[ "$code" =~ ^20[0-9]$ ]]; then
              echo "✅ Webhook sent successfully"
              exit 0
            fi

            [[ $attempt -lt 3 ]] && echo "Retrying…" && sleep 5
          done

          echo "❌ All retries failed" && exit 1
