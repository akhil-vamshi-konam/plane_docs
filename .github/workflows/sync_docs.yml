name: Send Custom Webhook on Push

on:
  push:
    branches: [main]

jobs:
  send_webhook:
    runs-on: ubuntu-latest

    steps:
    # 1 ─ Checkout full history so the diff action can compare commits
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2 ─ Detect changed files (JSON arrays ⇢ no parsing headaches)
    - name: Get changed files
      id: diff
      uses: tj-actions/changed-files@v46.0.5
      with:
        files: |
          **/*.mdx
          **/*.txt
        json: true          # turn list outputs into JSON
        escape_json: false  # keep them un-escaped so jq can read them

    # 3 ─ Quick debug print (optional)
    - name: Show diff
      run: |
        echo "Added   :"    ; echo '${{ steps.diff.outputs.added_files   }}' | jq .
        echo "Modified:"    ; echo '${{ steps.diff.outputs.modified_files}}' | jq .
        echo "Deleted :"    ; echo '${{ steps.diff.outputs.deleted_files }}' | jq .

    # 4 ─ Build a GitHub-style payload and send the webhook
    - name: Prepare & send webhook
      if: |
        steps.diff.outputs.added_files    != '[]' ||
        steps.diff.outputs.modified_files != '[]' ||
        steps.diff.outputs.deleted_files  != '[]'
      env:
        WEBHOOK_URL:    ${{ secrets.WEBHOOK_URL }}
        WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        ADDED_JSON:     ${{ steps.diff.outputs.added_files }}
        MOD_JSON:       ${{ steps.diff.outputs.modified_files }}
        DEL_JSON:       ${{ steps.diff.outputs.deleted_files }}
      run: |
        # Fall back to [] if any output is blank
        added=${ADDED_JSON:-'[]'}
        mod=${MOD_JSON:-'[]'}
        del=${DEL_JSON:-'[]'}

        # Build the payload
        payload=$(jq -n \
          --argjson added "$added" \
          --argjson modified "$mod" \
          --argjson removed "$del" \
          --arg repo_name "${{ github.event.repository.name }}" \
          --arg repo_full "${{ github.repository }}" \
          --arg owner     "${{ github.repository_owner }}" \
          '{
             commits: [{
               added:    $added,
               removed:  $removed,
               modified: $modified
             }],
             repository: {
               name:      $repo_name,
               full_name: $repo_full,
               owner: { name: $owner }
             }
           }')

        # Sign with HMAC-SHA256
        sig=$(printf '%s' "$payload" | \
              openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" -binary | xxd -p -c 256)

        # POST (3-try back-off loop)
        for i in 1 2 3; do
          echo "Attempt $i"
          resp=$(curl -sS -X POST "$WEBHOOK_URL" \
                   -H "Content-Type: application/json" \
                   -H "X-Hub-Signature-256: sha256=$sig" \
                   -H "X-GitHub-Event: push" \
                   --data "$payload" -w '\n%{http_code}')
          code=$(echo "$resp" | tail -n1)
          body=$(echo "$resp" | sed '$d')
          echo "HTTP $code"
          [ "$body" ] && echo "$body"
          [[ "$code" =~ ^20[0-9]$ ]] && { echo "✅ Webhook sent"; exit 0; }
          [[ $i -lt 3 ]] && sleep 5
        done
        echo "❌ Webhook failed after 3 tries" && exit 1
