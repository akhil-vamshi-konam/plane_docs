name: Send Commit-Based Webhook on Push

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  send_webhook:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Get commit information
      id: commits
      run: |
        echo "current_commit=${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "previous_commit=$(git rev-parse HEAD~1)" >> $GITHUB_OUTPUT
        echo "repo_name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT

    - name: Check for doc changes
      id: check_changes
      run: |
        if git diff --name-only ${{ steps.commits.outputs.previous_commit }}..${{ steps.commits.outputs.current_commit }} | grep -E '\.(mdx|txt)$'; then
          echo "has_doc_changes=true" >> $GITHUB_OUTPUT
        else
          echo "has_doc_changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Send webhook to prod and dev
      if: steps.check_changes.outputs.has_doc_changes == 'true'
      env:
        CURRENT_COMMIT: ${{ steps.commits.outputs.current_commit }}
        PREVIOUS_COMMIT: ${{ steps.commits.outputs.previous_commit }}
        REPO_NAME: ${{ steps.commits.outputs.repo_name }}
        REPO_FULL: ${{ github.repository }}
        OWNER: ${{ github.repository_owner }}
        WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        WEBHOOK_URL_DEV: ${{ secrets.WEBHOOK_URL_DEV }}
        WEBHOOK_SECRET_DEV: ${{ secrets.WEBHOOK_SECRET_DEV }}
      run: |
        send_webhook() {
          local URL=$1
          local SECRET=$2
          local LABEL=$3

          if [[ -z "$URL" || -z "$SECRET" ]]; then
            echo "Skipping $LABEL: Missing WEBHOOK_URL or WEBHOOK_SECRET"
            return
          fi

          payload=$(jq -n \
            --arg current_commit_id "$CURRENT_COMMIT" \
            --arg previous_commit_id "$PREVIOUS_COMMIT" \
            --arg repo_name "$REPO_NAME" \
            --arg repo_full "$REPO_FULL" \
            --arg owner "$OWNER" \
            '{
              current_commit_id: $current_commit_id,
              previous_commit_id: $previous_commit_id,
              repo_name: $repo_name,
              repository: {
                name: $repo_name,
                full_name: $repo_full,
                owner: { name: $owner }
              }
            }')

          sig=$(printf '%s' "$payload" | \
                openssl dgst -sha256 -hmac "$SECRET" -binary | xxd -p -c 256)

          for i in 1 2 3; do
            echo "Sending to $LABEL - Attempt $i"
            resp=$(curl -sS -X POST "$URL" \
                     -H "Content-Type: application/json" \
                     -H "X-Hub-Signature-256: sha256=$sig" \
                     -H "X-GitHub-Event: push" \
                     --data "$payload" -w '\n%{http_code}')
            code=$(echo "$resp" | tail -n1)
            body=$(echo "$resp" | sed '$d')

            if [[ "$code" =~ ^20[0-9]$ ]]; then
              echo "$LABEL webhook sent successfully"
              break
            fi

            if [[ $i -lt 3 ]]; then
              sleep $((i * i * 5))
            else
              echo "$LABEL webhook failed after 3 attempts"
              echo "$body"
            fi
          done
        }

        send_webhook "$WEBHOOK_URL_DEV" "$WEBHOOK_SECRET_DEV" "Development"
        send_webhook "$WEBHOOK_URL" "$WEBHOOK_SECRET" "Production"

    - name: No changes detected
      if: steps.check_changes.outputs.has_doc_changes == 'false'
      run: |
        echo "No .mdx or .txt changes. Skipping webhook sending."