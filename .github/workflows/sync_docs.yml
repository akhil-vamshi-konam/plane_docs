name: Send Commit-Based Webhook on Push

on:
  push:
    branches: [main]

jobs:
  send_webhook:
    runs-on: ubuntu-latest

    steps:
    # 1 ─ Checkout repository
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2  # We need at least 2 commits to get the previous one

    # 2 ─ Get current and previous commit IDs
    - name: Get commit information
      id: commits
      run: |
        CURRENT_COMMIT="${{ github.sha }}"
        PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
        REPO_NAME="${{ github.event.repository.name }}"
        
        echo "current_commit=$CURRENT_COMMIT" >> $GITHUB_OUTPUT
        echo "previous_commit=$PREVIOUS_COMMIT" >> $GITHUB_OUTPUT
        echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
        
        echo "Current commit: $CURRENT_COMMIT"
        echo "Previous commit: $PREVIOUS_COMMIT"
        echo "Repository: $REPO_NAME"

    # 3 ─ Check if there are any documentation files changed
    - name: Check for doc changes
      id: check_changes
      run: |
        # Check if any .mdx or .txt files have changed
        if git diff --name-only ${{ steps.commits.outputs.previous_commit }}..${{ steps.commits.outputs.current_commit }} | grep -E '\.(mdx|txt)$'; then
          echo "has_doc_changes=true" >> $GITHUB_OUTPUT
          echo "Documentation files have changed"
        else
          echo "has_doc_changes=false" >> $GITHUB_OUTPUT
          echo "No documentation files changed"
        fi

    # 4 ─ Build payload and send webhook (only if there are doc changes)
    - name: Send webhook
      if: steps.check_changes.outputs.has_doc_changes == 'true'
      env:
        WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        CURRENT_COMMIT: ${{ steps.commits.outputs.current_commit }}
        PREVIOUS_COMMIT: ${{ steps.commits.outputs.previous_commit }}
        REPO_NAME: ${{ steps.commits.outputs.repo_name }}
      run: |
        # Build the simplified payload with commit information
        payload=$(jq -n \
          --arg current_commit_id "$CURRENT_COMMIT" \
          --arg previous_commit_id "$PREVIOUS_COMMIT" \
          --arg repo_name "$REPO_NAME" \
          --arg repo_full "${{ github.repository }}" \
          --arg owner "${{ github.repository_owner }}" \
          '{
             current_commit_id: $current_commit_id,
             previous_commit_id: $previous_commit_id,
             repo_name: $repo_name,
             repository: {
               name: $repo_name,
               full_name: $repo_full,
               owner: { name: $owner }
             }
           }')

        echo "Sending payload:"
        echo "$payload" | jq .

        # Sign with HMAC-SHA256
        sig=$(printf '%s' "$payload" | \
              openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" -binary | xxd -p -c 256)

        # POST with retry logic (3 attempts with exponential backoff)
        for i in 1 2 3; do
          echo "Attempt $i"
          resp=$(curl -sS -X POST "$WEBHOOK_URL" \
                   -H "Content-Type: application/json" \
                   -H "X-Hub-Signature-256: sha256=$sig" \
                   -H "X-GitHub-Event: push" \
                   --data "$payload" -w '\n%{http_code}')
          code=$(echo "$resp" | tail -n1)
          body=$(echo "$resp" | sed '$d')
          echo "HTTP $code"
          [ "$body" ] && echo "$body"
          
          if [[ "$code" =~ ^20[0-9]$ ]]; then
            echo "✅ Webhook sent successfully"
            exit 0
          fi
          
          if [[ $i -lt 3 ]]; then
            wait_time=$((i * i * 5))  # Exponential backoff: 5s, 20s
            echo "⏳ Waiting ${wait_time}s before retry..."
            sleep $wait_time
          fi
        done
        
        echo "❌ Webhook failed after 3 attempts"
        exit 1

    # 5 ─ Log when no changes detected
    - name: No changes detected
      if: steps.check_changes.outputs.has_doc_changes == 'false'
      run: |
        echo "ℹ️ No documentation files (.mdx, .txt) were changed in this push"
        echo "Skipping webhook notification" 